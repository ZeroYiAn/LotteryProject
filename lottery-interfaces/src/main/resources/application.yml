server:
  # 注意端口号，使用8080连接不上xxl-job,可能被其他服务（点评项目）占用
  port: 8081


spring:
  kafka:
    #  2181是ZooKeeper的监听端口，9092是Kafka的监听端口。
    # bootstrap-servers: localhost:9092
    # 部署到虚拟机的docker中
    bootstrap-servers: 192.168.200.154:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 1
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：如果此消费组从来没有提交过offset，那么就从头开始消费，如果提交过offset，那么就从最新的offset处消费，就和latest一样了
      auto-offset-reset: earliest
      # ！！！是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      # 在侦听器容器中运行的线程数。
      # concurrency是多少，每个使用@KafkaListener的消费者实例就会创建多少个线程。
      # 例如此处有两个消费者，concurrency: 5，则会有2*5=10个线程进行监听，当然了，最后创建的线程的线程可能没有分配到分区，所以就会一直闲置到系统中。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false

  # Redis 云服务器搭建后配置并重启 【否则会 Unable to connect to 39.96.*.*:6379】
  # 防火墙放行：firewall-cmd --zone=public --add-port=6379/tcp --permanent
  # 防火墙重启：firewall-cmd --reload
  # redis.conf 注释掉 bind 127.0.0.1
  # redis.conf protected-mode yes 改为 protected-mode no
  redis:
    database: 0
    host: 192.168.200.154      # Redis服务器地址，修改为你的地址
    port: 6379              # Redis服务器连接端口
    password: 780415          # Redis服务器连接密码（默认为空）
    timeout: 3000           # Redis服务器链接超时配置


# xxl-job
# 官网：https://github.com/xuxueli/xxl-job/
# 地址：http://localhost:7397/xxl-job-admin 【需要先启动 xxl-job】
# 账号：admin
# 密码：123456
xxl:
  job:
    admin:
      ### 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；
      addresses: http://127.0.0.1:7397/xxl-job-admin
    accessToken: default_token
    executor:
      address:
      appname: lottery-job
      ip:
      port: 9999
      logpath: E:/JavaProjects/xxl-job-2.3.0/xxl-job-2.3.0/data/applogs/xxl-job/jobhandler
      logretentiondays: 30


# 多数据源路由配置
mini-db-router:
  jdbc:
    datasource:
      dbCount: 2
      tbCount: 4
      default: db00
      routerKey: uId
      list: db01,db02
      db00:
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/lottery?useUnicode=true
        #url: jdbc:mysql://192.168.200.149:3306/lottery?useUnicode=true
        username: root
        password: zero
      db01:
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/lottery_01?useUnicode=true
        #url: jdbc:mysql://192.168.200.149:3306/lottery_01?useUnicode=true
        username: root
        password: zero
      db02:
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/lottery_02?useUnicode=true
        #url: jdbc:mysql://192.168.200.149:3306/lottery_02?useUnicode=true
        username: root
        password: zero

# Mybatis
mybatis:
  mapper-locations: classpath:/mybatis/mapper/*.xml
  config-location:  classpath:/mybatis/config/mybatis-config.xml

# nacos 配置中心
nacos:
  discovery:
    server-addr: 192.168.200.154:8848


# Dubbo 广播方式配置，如果调用不稳定可以修改为直连模式：https://codechina.csdn.net/KnowledgePlanet/Lottery/-/issues/1
dubbo:
  application:
    name: Lottery
    version: 1.0.0
  #    parameters:
  #      unicast: false
  registry:
    #    address: N/A  # 不需要注册到服务注册中心
    #    address: #multicast://224.5.6.7:1234
    #    address: zookeeper://127.0.0.1:2181
    address: nacos://192.168.200.154:8848  # 服务器端地址
  protocol:
    name: dubbo
    port: -1
  scan:
    base-packages: cn.itedus.lottery.rpc.*



